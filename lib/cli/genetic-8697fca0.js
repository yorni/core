#!/usr/bin/env node
"use strict";var t=require("@debut/plugin-utils"),s=require("async-genetic"),e=require("./tester-transport-0f71243c.js");function i(s){let e;return e="bool"in s?Math.random()>.5:s.int?t.math.getRandomInt(s.min,s.max,s.odd):t.math.getRandomArbitrary(s.min,s.max,s.odd),e}exports.GeneticWrapper=class{constructor(t){this.options=t,this.configLookup=new Map,this.deduplicateLookup=new Set,this.scoreLookup=new Map,this.lastIteration=!1,this.getRandomSolution=()=>{const t={...this.baseOpts};return this.schemaKeys.forEach((s=>{t[s]=i(this.schema[s])})),this.options.validateSchema(t)?t:this.getRandomSolution()},this.fitness=async t=>{const s=JSON.stringify(t,Object.keys(t).sort()),e=this.scoreLookup.get(s);if(e&&!this.lastIteration)return await this.transport.complete,e;const i=await this.options.create(this.transport,t,0),o=await i.start();await this.transport.complete,await i.closeAll();const n=this.options.stats(i);this.lastIteration&&this.configLookup.set(t,n);const a=this.options.score(i);return this.scoreLookup.set(s,a),o(),a},this.mutate=t=>(t={...t},this.schemaKeys.forEach((s=>{s in this.schema&&Math.random()<.3&&(t[s]=i(this.schema[s]))})),this.options.validateSchema(t)?t:this.mutate(t)),this.crossover=(t,s,e=0)=>{const i={...s},o={...t};return this.schemaKeys.forEach((e=>{const n=Math.random()>.5?t:s,a=Math.random()>.5?s:t;i[e]=n[e],o[e]=a[e]})),e>=10||this.options.validateSchema(i)&&this.options.validateSchema(o)?[i,o]:this.crossover(t,s,++e)},this.deduplicate=t=>{const s=JSON.stringify(t,Object.keys(t).sort());return!this.deduplicateLookup.has(s)&&(this.deduplicateLookup.add(s),!0)},this.internalOptions={randomFunction:this.getRandomSolution,fitnessFunction:this.fitness,mutationFunction:this.mutate,crossoverFunction:this.crossover,populationSize:100,select1:s.Select.FittestLinear,select2:s.Select.Tournament3,fittestNSurvives:1,mutateProbablity:.3,crossoverProbablity:.6,deduplicate:this.deduplicate},this.genetic=new s.Genetic({...this.internalOptions,...this.options})}async start(t,s){try{this.schema=t,this.schemaKeys=Object.keys(t),this.configLookup=new Map,this.baseOpts=s,this.transport=new e.TesterTransport({ohlc:this.options.ohlc,comission:s.fee,broker:s.broker,ticker:s.ticker});const{broker:i="tinkoff",ticker:o,interval:n}=s,{days:a,gapDays:r}=this.options;let h=await e.getHistory({broker:i,ticker:o,interval:n,days:a,gapDays:r});this.options.ticksFilter&&(h=h.filter(this.options.ticksFilter(s))),this.options.log&&console.log(`\n----- Genetic Start with ${h.length} candles ----- \n`),this.transport.setTicks(h),this.genetic.seed();for(let t=0;t<this.options.generations;t++){this.lastIteration=t===this.options.generations-1;const s=Date.now();this.options.log&&console.log("Generation: ",t),this.transport.run(!0),await this.genetic.estimate(),this.options.log&&(console.log("Generation time: ",(Date.now()-s)/1e3,"s"),console.log("Stats: ",this.genetic.stats)),this.lastIteration||this.genetic.breed(),this.transport.reset(),this.deduplicateLookup.clear()}return this.genetic.best(this.options.best||30).reverse().map((t=>({config:t,stats:this.configLookup.get(t)})))}catch(t){return console.log(t),[]}}};
